kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  annotations:
    openshift.io/description: ''
    openshift.io/display-name: codeflare-elyra
  name: codeflare-elyra
  namespace: ray-demo
  finalizers:
    - kubernetes.io/pvc-protection
  labels:
    opendatahub.io/dashboard: 'true'
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
---
kind: Secret
apiVersion: v1
metadata:
  name: ocp-login-secret
  namespace: ray-demo
stringData:
  OCP_API_SERVER_URL: https://api.{{ .Values.clusterdomainurl }}:6443
  OCP_TOKEN: {{ .Values.ocptoken }}
type: Opaque
---
kind: Secret
apiVersion: v1
metadata:
  name: aws-connection-pipelines
  namespace: ray-demo
  labels:
    opendatahub.io/dashboard: 'true'
    opendatahub.io/managed: 'true'
  annotations:
    opendatahub.io/connection-type: s3
    openshift.io/display-name: pipelines
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_DEFAULT_REGION: us-east-1
  AWS_S3_BUCKET: ray-demo-pipelines
  AWS_S3_ENDPOINT: http://minio-service.minio.svc:9000
  AWS_SECRET_ACCESS_KEY: minio123
type: Opaque
---
kind: Secret
apiVersion: v1
metadata:
  name: aws-connection-ray-demo
  namespace: ray-demo
  labels:
    opendatahub.io/dashboard: 'true'
    opendatahub.io/managed: 'true'
  annotations:
    opendatahub.io/connection-type: s3
    openshift.io/display-name: ray-demo
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_DEFAULT_REGION: us-east-1
  AWS_S3_BUCKET: ray-demo
  AWS_S3_ENDPOINT: http://minio-service.minio.svc:9000
  AWS_SECRET_ACCESS_KEY: minio123
type: Opaque
---
apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  annotations:
    notebooks.opendatahub.io/inject-oauth: 'true'
    notebooks.opendatahub.io/last-size-selection: Small
    notebooks.opendatahub.io/oauth-logout-url: >-
      https://rhods-dashboard-redhat-ods-applications.apps.{{ .Values.clusterdomainurl }}/projects/ray-demo?notebookLogout=codeflare-elyra
    opendatahub.io/username: 'user'
    openshift.io/description: ''
    openshift.io/display-name: Codeflare Elyra
  name: codeflare-elyra
  namespace: ray-demo
  labels:
    app: codeflare-elyra
    opendatahub.io/dashboard: 'true'
    opendatahub.io/odh-managed: 'true'
    opendatahub.io/user: 'user'
spec:
  template:
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: nvidia.com/gpu.present
                    operator: NotIn
                    values:
                      - 'true'
              weight: 1
      containers:
        - resources:
            limits:
              cpu: '2'
              memory: 8Gi
            requests:
              cpu: '1'
              memory: 8Gi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /notebook/ray-demo/codeflare-elyra/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: codeflare-elyra
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /notebook/ray-demo/codeflare-elyra/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NOTEBOOK_ARGS
              value: |-
                --ServerApp.port=8888
                                  --ServerApp.token=''
                                  --ServerApp.password=''
                                  --ServerApp.base_url=/notebook/ray-demo/codeflare-elyra
                                  --ServerApp.quit_button=False
                                  --ServerApp.tornado_settings={"user":"user","hub_host":"https://rhods-dashboard-redhat-ods-applications.apps.{{ .Values.clusterdomainurl }}","hub_prefix":"/projects/ray-demo"}
            - name: JUPYTER_IMAGE
              value: >-
                image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/codeflare:0.1.0
          ports:
            - containerPort: 8888
              name: notebook-port
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /opt/app-root/src
              name: codeflare-elyra
            - mountPath: /opt/app-root/runtimes
              name: elyra-dsp-details
            - mountPath: /dev/shm
              name: shm
          envFrom:
            - secretRef:
                name: aws-connection-pipelines
            - secretRef:
                name: ocp-login-secret
          image: >-
            image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/codeflare:0.1.0
          workingDir: /opt/app-root/src
        - resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 100m
              memory: 64Mi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 8443
              name: oauth-proxy
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /etc/oauth/config
              name: oauth-config
            - mountPath: /etc/tls/private
              name: tls-certificates
          image: >-
            registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4bef31eb993feb6f1096b51b4876c65a6fb1f4401fee97fa4f4542b6b7c9bc46
          args:
            - '--provider=openshift'
            - '--https-address=:8443'
            - '--http-address='
            - '--openshift-service-account=codeflare-elyra'
            - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
            - '--cookie-expire=24h0m0s'
            - '--tls-cert=/etc/tls/private/tls.crt'
            - '--tls-key=/etc/tls/private/tls.key'
            - '--upstream=http://localhost:8888'
            - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
            - '--email-domain=*'
            - '--skip-provider-button'
            - >-
              --openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"codeflare-elyra","namespace":"$(NAMESPACE)"}
            - >-
              --logout-url=https://rhods-dashboard-redhat-ods-applications.apps.{{ .Values.clusterdomainurl }}/projects/ray-demo?notebookLogout=codeflare-elyra
      enableServiceLinks: false
      serviceAccountName: codeflare-elyra
      volumes:
        - name: codeflare-elyra
          persistentVolumeClaim:
            claimName: codeflare-elyra
        - name: elyra-dsp-details
          secret:
            secretName: aws-connection-pipelines
        - emptyDir:
            medium: Memory
          name: shm
        - name: oauth-config
          secret:
            defaultMode: 420
            secretName: codeflare-elyra-oauth-config
        - name: tls-certificates
          secret:
            defaultMode: 420
            secretName: codeflare-elyra-tls
---
apiVersion: datasciencepipelinesapplications.opendatahub.io/v1alpha1
kind: DataSciencePipelinesApplication
metadata:
  finalizers:
    - datasciencepipelinesapplications.opendatahub.io/finalizer
  name: pipelines-definition
  namespace: ray-demo
spec:
  apiServer:
    stripEOF: true
    dbConfigConMaxLifetimeSec: 120
    applyTektonCustomResource: true
    deploy: true
    enableSamplePipeline: false
    autoUpdatePipelineDefaultVersion: true
    archiveLogs: false
    terminateStatus: Cancelled
    enableOauth: true
    trackArtifacts: true
    collectMetrics: true
    injectDefaultScript: true
  database:
    mariaDB:
      deploy: true
      pipelineDBName: mlpipeline
      pvcSize: 10Gi
      username: mlpipeline
  objectStorage:
    externalStorage:
      bucket: ray-demo-pipelines
      host: minio-service.minio.svc:9000
      port: ''
      s3CredentialsSecret:
        accessKey: AWS_ACCESS_KEY_ID
        secretKey: AWS_SECRET_ACCESS_KEY
        secretName: aws-connection-pipelines
      scheme: http
      secure: false
  persistenceAgent:
    deploy: true
    numWorkers: 2
  scheduledWorkflow:
    cronScheduleTimezone: UTC
    deploy: true