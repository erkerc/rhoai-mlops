kind: Secret
apiVersion: v1
metadata:
  name: github-token
  namespace: ci-cd
  annotations:
    tekton.dev/git-0: 'https://github.com'
stringData:
  password: {{ .Values.githubtoken }}
  username: non
type: kubernetes.io/basic-auth
---
kind: Secret
apiVersion: v1
metadata:
  name: elyra-runtime
  namespace: ci-cd
stringData:
  odh_dsp.json: |
    {
      "name": "odh_dsp",
      "display_name": "Data Science Pipeline",
      "metadata": {
          "tags": [],
          "display_name": "Data Science Pipeline",
          "engine": "Tekton",
          "auth_type": "KUBERNETES_SERVICE_ACCOUNT_TOKEN",
          "api_endpoint": "https://ds-pipeline-pipelines-definition-production-project.apps.{{ .Values.clusterdomainurl }}",
          "public_api_endpoint": "https://rhods-dashboard-redhat-ods-applications.apps.{{ .Values.clusterdomainurl }}/pipelineRuns/production-project/pipelineRun/view/",
          "cos_auth_type": "KUBERNETES_SECRET",
          "cos_secret": "aws-connection-pipelines",
          "cos_endpoint": "http://minio-service.minio.svc:9000",
          "cos_bucket": "production-pipelines",
          "cos_username": "minio",
          "cos_password": "minio123",
          "runtime_type": "KUBEFLOW_PIPELINES"
      },
      "schema_name": "kfp",
      "resource": "/opt/app-root/src/.local/share/jupyter/metadata/runtimes/odh_dsp.json"
    }
type: Opaque
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: code-repository
  namespace: ci-cd
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: manifest-repository
  namespace: ci-cd
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ml-pipeline-ci-cd
  namespace: ci-cd
spec:
  tasks:
    - name: git-clone-code-repo
      params:
        - name: url
          value: 'REPO_URL'
        - name: revision
          value: ''
        - name: refspec
          value: ''
        - name: submodules
          value: 'false'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'true'
        - name: crtFileName
          value: ca-bundle.crt
        - name: subdirectory
          value: ''
        - name: sparseCheckoutDirectories
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: httpProxy
          value: ''
        - name: httpsProxy
          value: ''
        - name: noProxy
          value: ''
        - name: verbose
          value: 'true'
        - name: gitInitImage
          value: >-
            registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:1a50511583fc02a27012d17d942e247813404104ddd282d7e26f99765174392c
        - name: userHome
          value: /home/git
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: code-repository
    - name: build-pipeline-manifest
      params:
        - name: appName
          value: manifest-generator
        - name: pipeline-location
          value: model-training.pipeline
        - name: manifest-location
          value: model-training.yaml
      runAfter:
        - git-clone-code-repo
        - git-clone-manifest-repo
      taskRef:
        kind: Task
        name: build-pipeline-manifest
      workspaces:
        - name: code-repository
          workspace: code-repository
        - name: manifest-repository
          workspace: manifest-repository
    - name: git-push
      params:
        - name: BASE_IMAGE
          value: >-
            cgr.dev/chainguard/git:root-2.39@sha256:7759f87050dd8bacabe61354d75ccd7f864d6b6f8ec42697db7159eccd491139
        - name: GIT_USER_NAME
          value: CI-Pipeline
        - name: GIT_USER_EMAIL
          value: CI-Pipeline@openshift.com
        - name: GIT_SCRIPT
          value: >
            git config --global --add safe.directory /workspace/source && git
            add -A && git commit -m "added new pipeline manifest version"
            --allow-empty && git push origin HEAD:main
        - name: USER_HOME
          value: /home/git
        - name: VERBOSE
          value: 'true'
      runAfter:
        - upload-pipeline
      taskRef:
        kind: ClusterTask
        name: git-cli
      workspaces:
        - name: source
          workspace: manifest-repository
        - name: input
          workspace: manifest-repository
    - name: git-clone-manifest-repo
      params:
        - name: url
          value: 'REPO_URL'
        - name: revision
          value: ''
        - name: refspec
          value: ''
        - name: submodules
          value: 'false'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'true'
        - name: crtFileName
          value: ca-bundle.crt
        - name: subdirectory
          value: ''
        - name: sparseCheckoutDirectories
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: httpProxy
          value: ''
        - name: httpsProxy
          value: ''
        - name: noProxy
          value: ''
        - name: verbose
          value: 'true'
        - name: gitInitImage
          value: >-
            registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:1a50511583fc02a27012d17d942e247813404104ddd282d7e26f99765174392c
        - name: userHome
          value: /home/git
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: manifest-repository
    - name: upload-pipeline
      params:
        - name: manifest-location
          value: model-training.yaml
        - name: pipeline_name
          value: model-training
      runAfter:
        - build-pipeline-manifest
      taskRef:
        kind: Task
        name: upload-pipeline
      workspaces:
        - name: manifest-repository
          workspace: manifest-repository
  workspaces:
    - name: code-repository
    - name: manifest-repository
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: trigger-template-elyra-pipeline-repo
  namespace: ci-cd
spec:
  params:
    - name: git-revision
    - name: git-commit-message
    - name: git-repo-url
    - name: git-repo-name
    - name: content-type
    - name: pusher-name
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: ml-pipeline-ci-cd-
        labels:
          tekton.dev/pipeline: ml-pipeline-ci-cd
        namespace: ci-cd
      spec:
        params: []
        pipelineRef:
          name: ml-pipeline-ci-cd
        resources: []
        status: null
        workspaces:
          - name: code-repository
            persistentVolumeClaim:
              claimName: code-repository
          - name: manifest-repository
            persistentVolumeClaim:
              claimName: manifest-repository
---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: event-listener-elyra-pipeline-repo
  namespace: ci-cd
spec:
  namespaceSelector: {}
  resources: {}
  serviceAccountName: pipeline
  triggers:
    - bindings:
        - kind: ClusterTriggerBinding
          ref: github-push
      template:
        ref: trigger-template-elyra-pipeline-repo
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: event-listener-elyra-pipeline-repo
  namespace: ci-cd
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: event-listener-elyra-pipeline-repo
spec:
  to:
    kind: Service
    name: event-listener-elyra-pipeline-repo
    weight: 100
  port:
    targetPort: 8080
  wildcardPolicy: None